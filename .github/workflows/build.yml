name: build

on:
  push

env:
  PKG_NAME: "consul-terraform-sync"

jobs:
  get-product-version:
    runs-on: ubuntu-latest
    outputs:
      product-version: ${{ steps.get-product-version.outputs.product-version }}
    steps:
      - uses: actions/checkout@v2
      - name: get product version
        id: get-product-version
        run: |
          make version
          echo "::set-output name=product-version::$(make version)"

  build-386:
    needs: get-product-version
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [ linux, freebsd, windows ]
        goarch: [ "386" ]
        go: [ "1.16" ]
      fail-fast: true

    name: Go ${{ matrix.go }} ${{ matrix.goos }} ${{ matrix.goarch }} build
    env:
      GOOS: ${{ matrix.goos }}
      GOARCH: ${{ matrix.goarch }}
      DOCKER_CLI_EXPERIMENTAL: enabled

    steps:
      - uses: actions/checkout@v2
      - name: Build
        uses: ./.github/actions/build
        with:
          go-version: ${{ matrix.go }}
          goos: ${{ matrix.goos }}
          goarch: ${{ matrix.goarch }}
          package-name: ${{ env.PKG_NAME }}
          product-version: ${{ needs.get-product-version.outputs.product-version }}

  build-amd64:
    needs: get-product-version
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, freebsd, solaris, windows]
        goarch: ["amd64"]
        go: ["1.16"]
      fail-fast: true

    name: Go ${{ matrix.go }} ${{ matrix.goos }} ${{ matrix.goarch }} build
    env:
      GOOS: ${{ matrix.goos }}
      GOARCH: ${{ matrix.goarch }}
      DOCKER_CLI_EXPERIMENTAL: enabled

    steps:
      - uses: actions/checkout@v2
      - name: Build
        uses: ./.github/actions/build
        with:
          go-version: ${{ matrix.go }}
          goos: ${{ matrix.goos }}
          goarch: ${{ matrix.goarch }}
          package-name: ${{ env.PKG_NAME }}
          product-version: ${{ needs.get-product-version.outputs.product-version }}

  build-arm:
    needs: get-product-version
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux]
        goarch: [arm]
        go: ["1.16"]
      fail-fast: true

    name: Go ${{ matrix.go }} ${{ matrix.goos }} ${{ matrix.goarch }} build

    env:
      GOOS: ${{ matrix.goos }}
      GOARCH: ${{ matrix.goarch }}
      DOCKER_CLI_EXPERIMENTAL: enabled

    steps:
      - uses: actions/checkout@v2
      - name: Build
        uses: ./.github/actions/build
        with:
          go-version: ${{ matrix.go }}
          goos: ${{ matrix.goos }}
          goarch: ${{ matrix.goarch }}
          package-name: ${{ env.PKG_NAME }}
          product-version: ${{ needs.get-product-version.outputs.product-version }}

  build-arm64:
    needs: get-product-version
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux]
        goarch: [arm64]
        go: ["1.16"]
      fail-fast: true

    name: Go ${{ matrix.go }} ${{ matrix.goos }} ${{ matrix.goarch }} build

    env:
      GOOS: ${{ matrix.goos }}
      GOARCH: ${{ matrix.goarch }}
      DOCKER_CLI_EXPERIMENTAL: enabled

    steps:
      - uses: actions/checkout@v2
      - name: Build
        uses: ./.github/actions/build
        with:
          go-version: ${{ matrix.go }}
          goos: ${{ matrix.goos }}
          goarch: ${{ matrix.goarch }}
          package-name: ${{ env.PKG_NAME }}
          product-version: ${{ needs.get-product-version.outputs.product-version }}

  build-darwin:
    needs: get-product-version
    runs-on: macos-latest
    strategy:
      matrix:
        goos: [ darwin ]
        goarch: [ "amd64" ]
        go: [ "1.16" ]
      fail-fast: true

    name: Go ${{ matrix.go }} ${{ matrix.goos }} ${{ matrix.goarch }} build

    env:
      GOOS: ${{ matrix.goos }}
      GOARCH: ${{ matrix.goarch }}

    steps:
      - uses: actions/checkout@v2
      - name: Build
        uses: ./.github/actions/build
        with:
          go-version: ${{ matrix.go }}
          goos: ${{ matrix.goos }}
          goarch: ${{ matrix.goarch }}
          package-name: ${{ env.PKG_NAME }}
          product-version: ${{ needs.get-product-version.outputs.product-version }}
  
  build-linux-packages:
    needs:
      - get-product-version
      - build-arm64
      - build-386
      - build-amd64
      - build-arm
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux]
        goarch: ["arm", "arm64", "386", "amd64"]
        go: ["1.16"]
      fail-fast: true

    name: Build linux package ${{ matrix.goarch }}

    steps:
      - uses: actions/checkout@v2
      # download arm/arm64/386/amd64 binaries from build jobs
      - name: Package
        uses: ./.github/actions/package
        with:
          name: ${{ github.event.repository.name }}
          description: "Consul Terraform Sync is a service-oriented tool for managing network infrastructure near real-time."
          arch: ${{ matrix.goarch }}
          version: ${{ needs.get-product-version.outputs.product-version }}
          maintainer: "HashiCorp"
          homepage: "https://github.com/hashicorp/consul-terraform-sync"
          license: "MPL-2.0"
          binary: "dist/${{ env.PKG_NAME }}"
          deb_depends: "openssl"
          rpm_depends: "openssl"
  
  
  build-docker:
    needs:
      - get-product-version
      - build-arm64
      - build-386
      - build-amd64
      - build-arm
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: ["arm", "arm64", "386", "amd64"]
    name: Docker ${{ matrix.arch }} build

    steps:
      - uses: actions/checkout@v2

      # download arm/arm64/386/amd64 binaries from build jobs
      - uses: actions/download-artifact@v2
        with:
          name: ${{ github.event.repository.name }}_${{ needs.get-product-version.outputs.product-version }}_linux_${{ matrix.arch }}.zip
      # build docker image
      - name: Docker build
        working-directory: ./.release/docker
        run: |
          docker version
          unzip -j ${GITHUB_WORKSPACE}/${{ github.event.repository.name }}_${{ needs.get-product-version.outputs.product-version }}_linux_${{ matrix.arch }}.zip
          # arm32 bit docker images are set with --platform=linux/arm/v6
          if [ "${{ matrix.arch }}" = "arm" ]; then
            make docker ARCH=${{ matrix.arch }} GOARM_DOCKER="/v6"
          else
            make docker ARCH=${{ matrix.arch }}
          fi
      # upload image tarball
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ github.event.repository.name }}_${{ needs.get-product-version.outputs.product-version }}_docker_linux_${{ matrix.arch }}.tar
          path: .release/docker/${{ github.event.repository.name }}_${{ needs.get-product-version.outputs.product-version }}_docker_linux_${{ matrix.arch }}.tar

  generate_metadata:
    needs: get-product-version
    runs-on: ubuntu-latest
    name: Generate Metadata

    steps:
      - uses: actions/checkout@v2

      - name: Generate Metadata
        run: .github/scripts/generate_metadata.sh | tee metadata.json

      - uses: actions/upload-artifact@v2
        with:
          name: metadata.json
          path: metadata.json
