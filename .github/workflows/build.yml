name: build

on:
  push
#placeholder to replicate current release trigger (with version/current.txt and .github/workflows/release-tag.yml files) need to ask Sarah to confirm
#on:
#  workflow_run:
#    workflows: ["Release tag"]
#    types:
#      - completed

jobs:
  get-product-version:
    runs-on: ubuntu-latest
    outputs:
      product-version: ${{ steps.get-product-version.outputs.product-version }}
    steps:
      - uses: actions/checkout@v2
      - name: get product version
        id: get-product-version
        run: |
          make version
          echo "::set-output name=product-version::$(make version)"

  build-386:
    needs: get-product-version
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [ linux, freebsd, windows ]
        goarch: [ "386" ]
        go: [ "1.16" ]
      fail-fast: true

    name: Go ${{ matrix.go }} ${{ matrix.goos }} ${{ matrix.goarch }} build
    env:
      GOOS: ${{ matrix.goos }}
      GOARCH: ${{ matrix.goarch }}

    steps:
        - uses: actions/checkout@v2
        - name: Setup go
          uses: actions/setup-go@v2
          with:
            go-version: ${{ matrix.go }}
        - name: Build
          run: |
            mkdir dist out
            go build -o dist/ .
            zip -r -j out/${{ github.event.repository.name }}${{ needs.get-product-version.outputs.product-version }}_${{ matrix.goos }}_${{ matrix.goarch }}.zip dist/
        - uses: actions/upload-artifact@v2
          with:
            name: ${{ github.event.repository.name }}${{ needs.get-product-version.outputs.product-version }}_${{ matrix.goos }}_${{ matrix.goarch }}.zip
            path: out/${{ github.event.repository.name }}${{ needs.get-product-version.outputs.product-version }}_${{ matrix.goos }}_${{ matrix.goarch }}.zip
      
        - name: Docker build
          if: ${{ matrix.goos == 'linux' }}
          working-directory: ./packaging/docker
          run: |
            cp ../../dist/${{ github.event.repository.name }} ./
            make docker ARCH=${{ matrix.goarch }}

        - uses: actions/upload-artifact@v2
          if: ${{ matrix.goos == 'linux' }}
          with:
            name: ${{ github.event.repository.name }}_${{ needs.get-product-version.outputs.product-version }}_docker_linux_${{ matrix.goarch }}.tar
            path: packaging/docker/${{ github.event.repository.name }}_${{ needs.get-product-version.outputs.product-version }}_docker_linux_${{ matrix.goarch }}.tar

  build-amd64:
    needs: get-product-version
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, freebsd, solaris, windows]
        goarch: ["amd64"]
        go: ["1.16"]
      fail-fast: true

    name: Go ${{ matrix.go }} ${{ matrix.goos }} ${{ matrix.goarch }} build

    env:
      GOOS: ${{ matrix.goos }}
      GOARCH: ${{ matrix.goarch }}

    steps:
      - uses: actions/checkout@v2

      - name: Setup go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go }}

      - name: Build
        run: |
          mkdir dist out
          go build -o dist/
          zip -r -j out/${{ github.event.repository.name }}_${{ needs.get-product-version.outputs.product-version }}_${{ matrix.goos }}_${{ matrix.goarch }}.zip dist/
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ github.event.repository.name }}_${{ needs.get-product-version.outputs.product-version }}_${{ matrix.goos }}_${{ matrix.goarch }}.zip
          path: out/${{ github.event.repository.name }}_${{ needs.get-product-version.outputs.product-version }}_${{ matrix.goos }}_${{ matrix.goarch }}.zip

  build-arm:
    needs: get-product-version
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux]
        goarch: [arm, arm64]
        go: ["1.16"]
      fail-fast: true

    name: Go ${{ matrix.go }} ${{ matrix.goos }} ${{ matrix.goarch }} build

    env:
      GOOS: ${{ matrix.goos }}
      GOARCH: ${{ matrix.goarch }}

    steps:
      - uses: actions/checkout@v2

      - name: Setup go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go }}

      - name: Build
        run: |
          mkdir dist out
          go build -o dist/
          zip -r -j out/${{ github.event.repository.name }}_${{ needs.get-product-version.outputs.product-version }}_${{ matrix.goos }}_${{ matrix.goarch }}.zip dist/
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ github.event.repository.name }}_${{ needs.get-product-version.outputs.product-version }}_${{ matrix.goos }}_${{ matrix.goarch }}.zip
          path: out/${{ github.event.repository.name }}_${{ needs.get-product-version.outputs.product-version }}_${{ matrix.goos }}_${{ matrix.goarch }}.zip

  build-darwin:
    needs: get-product-version
    runs-on: macos-latest
    strategy:
      matrix:
        goos: [ darwin ]
        goarch: [ "amd64" ]
        go: [ "1.16" ]
      fail-fast: true

    name: Go ${{ matrix.go }} ${{ matrix.goos }} ${{ matrix.goarch }} build

    env:
      GOOS: ${{ matrix.goos }}
      GOARCH: ${{ matrix.goarch }}

    steps:
      - uses: actions/checkout@v2

      - name: Setup go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go }}

      - name: Build
        run: |
          mkdir dist out
          go build -o dist/
          zip -r -j out/${{ github.event.repository.name }}_${{ needs.get-product-version.outputs.product-version }}_${{ matrix.goos }}_${{ matrix.goarch }}.zip dist/
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ github.event.repository.name }}_${{ needs.get-product-version.outputs.product-version }}_${{ matrix.goos }}_${{ matrix.goarch }}.zip
          path: out/${{ github.event.repository.name }}_${{ needs.get-product-version.outputs.product-version }}_${{ matrix.goos }}_${{ matrix.goarch }}.zip

  generate_metadata:
    needs: get-product-version
    runs-on: ubuntu-latest
    name: Generate Metadata

    steps:
      - uses: actions/checkout@v2

      - name: Generate Metadata
        run: .github/scripts/generate_metadata.sh | tee metadata.json

      - uses: actions/upload-artifact@v2
        with:
          name: metadata.json
          path: metadata.json
